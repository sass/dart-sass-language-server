import fs from 'node:fs/promises';
import path from 'node:path';

/** @typedef {import('@vscode/web-custom-data/data/browsers.css-data.json')} CssData */

async function getCssData() {
  let customData = await fs.readFile(
    path.join(
      import.meta.dirname,
      'node_modules',
      '@vscode',
      'web-custom-data',
      'data',
      'browsers.css-data.json'
    ),
    'utf-8'
  );

  return JSON.parse(customData);
}

/** @type {CssData} */
const customData = await getCssData();

const output = /* dart */ `
// Do not edit this file!
// This file is generated from tool/web_data/
import 'css_at_directive.dart';
import 'css_property.dart';
import 'css_pseudo_class.dart';
import 'css_pseudo_element.dart';
import 'css_value.dart';
import 'entry_status.dart';
import 'reference.dart';

/// Documentation and API reference used for hover information and completions.
///
/// Includes browser support data used in hover information,
/// and relevance used to sort completions (based on Chrome usage stats).
///
/// Generated from JSON provided by the \`@vscode/web-custom-data\` npm package.
/// Go to tool/web_data/ to update its contents.
class CssDataGenerated {
  final properties = [
    ${toCssProperties(customData.properties)}
  ];

  final atDirectives = [
    ${toCssAtDirectives(customData.atDirectives)}
  ];

  final pseudoElements = [
    ${toCssPseudoElements(customData.pseudoElements)}
  ];

  final pseudoClasses = [
    ${toCssPseudoClasses(customData.pseudoClasses)}
  ];
}
`;

/** @param {CssData["properties"]} properties */
function toCssProperties(properties) {
  return properties
    .map(
      (p) => /* dart */ `
    CssProperty(${toString(p.name)},
      description: ${toStringOrNull(p.description)},
      browsers: ${toStringListOrNull(p.browsers)},
      restrictions: ${toStringListOrNull(p.restrictions)},
      status: ${toEntryStatus(p.status)},
      syntax: ${toStringOrNull(p.syntax)},
      values: ${toValues(p.values)},
      references: ${toReferences(p.references)},
      relevance: ${p.relevance || 'null'},
      atRule: ${toStringOrNull(p.atRule)})`
    )
    .join(',');
}

/** @param {CssData["atDirectives"]} atDirectives */
function toCssAtDirectives(atDirectives) {
  return atDirectives.map(
    (d) => /* dart */ `
    CssAtDirective(${toString(d.name)},
      description: ${toStringOrNull(d.description)},
      browsers: ${toStringListOrNull(d.browsers)},
      status: ${toEntryStatus(d.status)},
      references: ${toReferences(d.references)})`
  );
}

/** @param {CssData["pseudoClasses"]} pseudoClasses */
function toCssPseudoClasses(pseudoClasses) {
  return pseudoClasses.map(
    (p) => /* dart */ `
    CssPseudoClass(${toString(p.name)},
      description: ${toStringOrNull(p.description)},
      browsers: ${toStringListOrNull(p.browsers)},
      status: ${toEntryStatus(p.status)},
      references: ${toReferences(p.references)})`
  );
}

/** @param {CssData["pseudoElements"]} pseudoElements */
function toCssPseudoElements(pseudoElements) {
  return pseudoElements.map(
    (p) => /* dart */ `
    CssPseudoElement(${toString(p.name)},
      description: ${toStringOrNull(p.description)},
      browsers: ${toStringListOrNull(p.browsers)},
      status: ${toEntryStatus(p.status)},
      references: ${toReferences(p.references)})`
  );
}

function toStringOrNull(value) {
  if (!value) return 'null';
  return toString(value);
}

function toStringListOrNull(value) {
  return value ? `[${value.map(toString)}]` : 'null';
}

function toString(string) {
  // Some values come quoted in the JSON, but most do not.
  // Start with all strings unquoted.
  var unquoted =
    string.startsWith('"') && string.endsWith('"')
      ? string.substring(1, string.length - 1)
      : string;

  return `"${unquoted
    // Escape any "air quotes" thay may be in the content
    .replaceAll('"', '\\"')
    // Ensure \n get kept as the literal characters \n
    .replaceAll('\n', '\\n')}"`;
}

function toEntryStatus(status) {
  return status ? `EntryStatus.${status}` : 'null';
}

function toValues(values) {
  if (!values) return 'null';
  return `[${values.map(
    (v) => /* dart */ `
        CssValue(${toString(v.name)},
          description: ${toStringOrNull(v.description)},
          browsers: ${toStringListOrNull(v.browsers)},
          status: ${toEntryStatus(v.status)},
          references: ${toReferences(v.references)})`
  )}
      ]`;
}

function toReferences(references) {
  if (!references) return 'null';
  return `[${references.map(
    (r) => `Reference(${toString(r.name)}, Uri.parse(${toString(r.url)}))`
  )}]`;
}

const outputPath = path.resolve(
  import.meta.dirname,
  '..',
  '..',
  'pkgs',
  'sass_language_services',
  'lib',
  'src',
  'css',
  'css_data_generated.dart'
);
console.log(`Writing to ${outputPath}`);
await fs.writeFile(outputPath, output);
